plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

android {
    namespace = "com.moutrans.app.moutrans"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    // Cargar archivo .env desde la raÃ­z del proyecto Flutter
    def localProperties = new Properties()
    def localPropertiesFile = rootProject.file('../.env')
    if (localPropertiesFile.exists()) {
        localPropertiesFile.withInputStream { stream ->
            localProperties.load(stream)
        }
    }
    def apiKey = localProperties['GOOGLE_MAPS_API_KEY'] ?: ""
    if (apiKey == "") {
        throw new GradleException("GOOGLE_MAPS_API_KEY is missing or empty in .env file")
    }

    defaultConfig {
        applicationId = "com.moutrans.app.moutrans"
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode = flutter.versionCode
        versionName = flutter.versionName

        // ðŸ”½ Ahora sÃ­, aquÃ­ va el uso de esa variable
        manifestPlaceholders = [GOOGLE_MAPS_API_KEY: apiKey]
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig = signingConfigs.debug
        }
    }
}

flutter {
    source = "../.."
}
